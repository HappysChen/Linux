一、进程
  1、概念
      指计算机中已运行的程序；程序本身只是指令、数据及其组织形式的描述，相当于一个名词，进程才是程序（那些指令和数据）的真正运行实例，
  现代计算机系统可在同一段时间内以进程的形式将多个程序加载到存储器中，并借由时间共享（或称时分复用），以在一个处理器上表现出同时（平行性）运行的感觉。
  同样的，使用多线程技术（多线程即每一个线程都代表一个进程内的一个独立执行上下文）的操作系统或计算机体系结构，同样程序的平行线程，可在多CPU主机或网络上真正同时运行（在不同的CPU上）。   
  
用户下达运行程序的命令后，就会产生进程。同一程序可产生多个进程（一对多关系），以允许同时有多位用户运行同一程序，却不会相冲突。

进程需要一些资源才能完成工作，如CPU使用时间、存储器、文件以及I/O设备，且为依序逐一进行，也就是每个CPU核心任何时间内仅能运行一项进程。

1）进程与线程的区别：进程是计算机管理运行程序的一种方式，一个进程下可包含一个或者多个线程。线程可以理解为子进程。

2）进程之间是相互独立的，但进程A打开之后，通过MMU进行映射，在通过在物理内存中开辟一个空间，若打开同一对象，形成进程B，即进程A和进程B是由同一个对象打开而来，也需要MMU来映射到物理内存中，
但物理内存开辟的空间与进程A的是不一样的，两个进程的PCB共享同一个内核空间，但他们都是不同的PCB。

3）MMU（内存管理单元）的作用：
    完成物理内存和虚拟内存映射
    修改内存的访问级别

CPU和MMU：
  MMU是CPU的一部分
  存储介质：网络->硬盘->内存->cache(缓存空间）->寄存器
  当程序运行的时候，CPU中的预取器在缓存空间中获取程序指令，然后传给译码器，通过译码，识别程序的指令，然后传给算数逻辑单元进行运算，最后回写到寄存器堆中，这就是CPU完成的
  这个过程中，当程序运行时，MMU开始工作，但计算机取到指令就不需要MMU了。

2、进程控制块PCB
  每个进程在内核中都有一个进程控制块来维护进程相关的信息，Linux内核的进程控制快是task_struct结构体。
  包含：
   进程id:系统中每个进程都有一个id,在C语言中用pid_t类型表示，其实就是一个非负整数；
   进程状态：就绪、运行、堵塞、停止等状态
   
    进程在运行时，状态（state）会改变。所谓状态，就是指进程目前的动作：
    新生（new）：进程新产生中。
    运行（running）：正在运行。
    等待（waiting）：等待某事发生，例如等待用户输入完成。亦称“阻塞”（blocked）
    就绪（ready）：排班中，等待CPU。
    结束（terminated）：完成运行。
    
   进程切换时需要保护和恢复一些CPU寄存器
   描述虚拟地址空间的信息：与MMU有关
   描述控制终端的信息
   当前工作目录
   umask掩码：保护或修改文件的权限
   文件描述符表，包含很多指向file结构体的指针
   和信号相关的信息
   用户id和组id
   会话session和进程组
   进程可以使用的资源上限(Resource limit）
   
 3、环境变量
    操作函数：
    getenv(); // 获取环境变量
    setenv(); //修改或添加环境变量
    unsetenv(); //删除环境变量
    
 4、进程控制
    
    
    




